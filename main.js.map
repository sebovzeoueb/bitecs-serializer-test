{
  "version": 3,
  "sources": ["node_modules/bitecs/src/Constants.js", "node_modules/bitecs/src/Storage.js", "node_modules/bitecs/src/Util.js", "node_modules/bitecs/src/Serialize.js", "node_modules/bitecs/src/Entity.js", "node_modules/bitecs/src/Query.js", "node_modules/bitecs/src/Component.js", "node_modules/bitecs/src/World.js", "node_modules/bitecs/src/System.js", "node_modules/bitecs/src/index.js", "src/baseTypes.js", "src/components.js", "src/staticEntityComponents.js", "src/creatureComponents.js", "src/chunkEntityComponents.js", "src/index.js"],
  "sourcesContent": ["export const TYPES_ENUM = {\n  i8: 'i8',\n  ui8: 'ui8',\n  ui8c: 'ui8c',\n  i16: 'i16',\n  ui16: 'ui16',\n  i32: 'i32',\n  ui32: 'ui32',\n  f32: 'f32',\n  f64: 'f64',\n  eid: 'eid',\n}\n\nexport const TYPES_NAMES = {\n  i8: 'Int8',\n  ui8: 'Uint8',\n  ui8c: 'Uint8Clamped',\n  i16: 'Int16',\n  ui16: 'Uint16',\n  i32: 'Int32',\n  ui32: 'Uint32',\n  eid: 'Uint32',\n  f32: 'Float32',\n  f64: 'Float64'\n}\n\nexport const TYPES = {\n  i8: Int8Array,\n  ui8: Uint8Array,\n  ui8c: Uint8ClampedArray,\n  i16: Int16Array,\n  ui16: Uint16Array,\n  i32: Int32Array,\n  ui32: Uint32Array,\n  f32: Float32Array,\n  f64: Float64Array,\n  eid: Uint32Array,\n}\n\nexport const UNSIGNED_MAX = {\n  uint8: 2**8,\n  uint16: 2**16,\n  uint32: 2**32\n}\n", "import { TYPES, TYPES_ENUM, TYPES_NAMES, UNSIGNED_MAX } from './Constants.js'\n// import { createAllocator } from './Allocator.js'\n\nconst roundToMultiple = mul => x => Math.ceil(x / mul) * mul\nconst roundToMultiple4 = roundToMultiple(4)\n\nexport const $storeRef = Symbol('storeRef')\nexport const $storeSize = Symbol('storeSize')\nexport const $storeMaps = Symbol('storeMaps')\nexport const $storeFlattened = Symbol('storeFlattened')\nexport const $storeBase = Symbol('storeBase')\nexport const $storeType = Symbol('storeType')\n\nexport const $storeArrayCounts = Symbol('storeArrayCount')\nexport const $storeSubarrays = Symbol('storeSubarrays')\nexport const $subarrayCursors = Symbol('subarrayCursors')\nexport const $subarray = Symbol('subarray')\nexport const $subarrayFrom = Symbol('subarrayFrom')\nexport const $subarrayTo = Symbol('subarrayTo')\nexport const $parentArray = Symbol('subStore')\nexport const $tagStore = Symbol('tagStore')\n\nexport const $queryShadow = Symbol('queryShadow')\nexport const $serializeShadow = Symbol('serializeShadow')\n\nexport const $indexType = Symbol('indexType')\nexport const $indexBytes = Symbol('indexBytes')\n\nexport const $isEidType = Symbol('isEidType')\n\nconst stores = {}\n\n// const alloc = createAllocator()\n\nexport const resize = (ta, size) => {\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\n  const newTa = new ta.constructor(newBuffer)\n  newTa.set(ta, 0)\n  return newTa\n}\n\nexport const createShadow = (store, key) => {\n  if (!ArrayBuffer.isView(store)) {\n    const shadowStore = store[$parentArray].slice(0).fill(0)\n    store[key] = store.map((_,eid) => {\n      const from = store[eid][$subarrayFrom]\n      const to = store[eid][$subarrayTo]\n      return shadowStore.subarray(from, to)\n    })\n  } else {\n    store[key] = store.slice(0).fill(0)\n  }\n}\n\nconst resizeSubarray = (metadata, store, size) => {\n  const cursors = metadata[$subarrayCursors]\n  let type = store[$storeType]\n  const length = store[0].length\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (cursors[type] === 0) {\n\n    const arrayCount = metadata[$storeArrayCounts][type]\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n    \n    // // for threaded impl\n    // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n    array.set(metadata[$storeSubarrays][type])\n    \n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n}\n\nconst resizeRecursive = (metadata, store, size) => {\n  Object.keys(store).forEach(key => {\n    const ta = store[key]\n    if (Array.isArray(ta)) {\n      resizeSubarray(metadata, ta, size)\n      store[$storeFlattened].push(ta)\n    } else if (ArrayBuffer.isView(ta)) {\n      store[key] = resize(ta, size)\n      store[$storeFlattened].push(store[key])\n    } else if (typeof ta === 'object') {\n      resizeRecursive(metadata, store[key], size)\n    }\n  })\n}\n\nexport const resizeStore = (store, size) => {\n  if (store[$tagStore]) return\n  store[$storeSize] = size\n  store[$storeFlattened].length = 0\n  Object.keys(store[$subarrayCursors]).forEach(k => {\n    store[$subarrayCursors][k] = 0\n  })\n  resizeRecursive(store, store, size)\n}\n\nexport const resetStore = store => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      ta.fill(0)\n    })\n    Object.keys(store[$storeSubarrays]).forEach(key => {\n      store[$storeSubarrays][key].fill(0)\n    })\n  }\n}\n\nexport const resetStoreFor = (store, eid) => {\n  if (store[$storeFlattened]) {\n    store[$storeFlattened].forEach(ta => {\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\n      else ta[eid].fill(0)\n    })\n  }\n}\n\n// const createTypeStore = (type, length) => {\n//   const store = alloc(type, length)\n//   store[$isEidType] = type === TYPES_ENUM.eid\n//   return store\n// }\nconst createTypeStore = (type, length) => {\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\n  const buffer = new ArrayBuffer(totalBytes)\n  const store = new TYPES[type](buffer)\n  store[$isEidType] = type === TYPES_ENUM.eid\n  return store\n}\n\nexport const parentArray = store => store[$parentArray]\n\nconst createArrayStore = (metadata, type, length) => {\n  const size = metadata[$storeSize]\n  const store = Array(size).fill(0)\n  store[$storeType] = type\n  store[$isEidType] = type === TYPES_ENUM.eid\n\n  const cursors = metadata[$subarrayCursors]\n  const indexType =\n    length <= UNSIGNED_MAX.uint8\n      ? TYPES_ENUM.ui8\n      : length <= UNSIGNED_MAX.uint16\n        ? TYPES_ENUM.ui16\n        : TYPES_ENUM.ui32\n\n  if (!length) throw new Error('bitECS - Must define component array length')\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\n\n  // create buffer for type if it does not already exist\n  if (!metadata[$storeSubarrays][type]) {\n    const arrayCount = metadata[$storeArrayCounts][type]\n    const summedLength = Array(arrayCount).fill(0).reduce((a, p) => a + length, 0)\n    \n    // for threaded impl\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\n    // const buffer = new SharedArrayBuffer(totalBytes)\n\n    const array = new TYPES[type](roundToMultiple4(summedLength * size))\n\n    metadata[$storeSubarrays][type] = array\n    \n    array[$indexType] = TYPES_NAMES[indexType]\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n  }\n\n  // pre-generate subarrays for each eid\n  const start = cursors[type]\n  let end = 0\n  for (let eid = 0; eid < size; eid++) {\n    const from = cursors[type] + (eid * length)\n    const to = from + length\n\n    store[eid] = metadata[$storeSubarrays][type].subarray(from, to)\n    \n    store[eid][$subarrayFrom] = from\n    store[eid][$subarrayTo] = to\n    store[eid][$subarray] = true\n    store[eid][$indexType] = TYPES_NAMES[indexType]\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\n    \n    end = to\n  }\n\n  cursors[type] = end\n\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\n\n  return store\n}\n\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\n\nexport const createStore = (schema, size) => {\n  const $store = Symbol('store')\n\n  if (!schema || !Object.keys(schema).length) {\n    // tag component\n    stores[$store] = {\n      [$storeSize]: size,\n      [$tagStore]: true,\n      [$storeBase]: () => stores[$store]\n    }\n    return stores[$store]\n  }\n\n  schema = JSON.parse(JSON.stringify(schema))\n\n  const arrayCounts = {}\n  const collectArrayCounts = s => {\n    const keys = Object.keys(s)\n    for (const k of keys) {\n      if (isArrayType(s[k])) {\n        if (!arrayCounts[s[k][0]]) arrayCounts[s[k][0]] = 0\n        arrayCounts[s[k][0]]++\n      } else if (s[k] instanceof Object) {\n        collectArrayCounts(s[k])\n      }\n    }\n  }\n  collectArrayCounts(schema)\n\n  const metadata = {\n    [$storeSize]: size,\n    [$storeMaps]: {},\n    [$storeSubarrays]: {},\n    [$storeRef]: $store,\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\n    [$storeFlattened]: [],\n    [$storeArrayCounts]: arrayCounts\n  }\n\n  if (schema instanceof Object && Object.keys(schema).length) {\n\n    const recursiveTransform = (a, k) => {\n\n      if (typeof a[k] === 'string') {\n\n        a[k] = createTypeStore(a[k], size)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n\n      } else if (isArrayType(a[k])) {\n        \n        const [type, length] = a[k]\n        a[k] = createArrayStore(metadata, type, length)\n        a[k][$storeBase] = () => stores[$store]\n        metadata[$storeFlattened].push(a[k])\n        // Object.seal(a[k])\n\n      } else if (a[k] instanceof Object) {\n        \n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\n        // Object.seal(a[k])\n        \n      }\n\n      return a\n    }\n\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\n    stores[$store][$storeBase] = () => stores[$store]\n\n    // Object.seal(stores[$store])\n\n    return stores[$store]\n\n  }\n}\n\nexport const free = (store) => {\n  delete stores[store[$storeRef]]\n}", "export const Uint32SparseSet = (length) => {\n  const dense = new Uint32Array(length)\n  const sparse = new Uint32Array(length)\n\n  let cursor = 0\n  dense.count = () => cursor + 1\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = cursor\n    dense[cursor] = val\n\n    cursor++\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense[cursor]\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n\n    cursor--\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}\n\nexport const SparseSet = () => {\n  const dense = []\n  const sparse = []\n\n  dense.sort = function (comparator) {\n    const result = Array.prototype.sort.call(this, comparator)\n\n    for(let i = 0; i < dense.length; i++) {\n      sparse[dense[i]] = i\n    }\n    \n    return result\n  }\n\n  const has = val => dense[sparse[val]] === val\n\n  const add = val => {\n    if (has(val)) return\n    sparse[val] = dense.push(val) - 1\n  }\n\n  const remove = val => {\n    if (!has(val)) return\n    const index = sparse[val]\n    const swapped = dense.pop()\n    if (swapped !== val) {\n      dense[index] = swapped\n      sparse[swapped] = index\n    }\n  }\n\n  return {\n    add,\n    remove,\n    has,\n    sparse,\n    dense,\n  }\n}", "import { $indexBytes, $indexType, $isEidType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\nimport { $localEntities, $localEntityLookup } from \"./World.js\"\n\nexport const DESERIALIZE_MODE = {\n  REPLACE: 0,\n  APPEND: 1,\n  MAP: 2\n}\n\nlet resized = false\n\nexport const setSerializationResized = v => { resized = v }\n\nconst canonicalize = (target) => {\n  let componentProps = []\n  let changedProps = new Map()\n  if (Array.isArray(target)) {\n    componentProps = target\n      .map(p => {\n        if (!p) throw new Error('bitECS - Cannot serialize undefined component')\n        if (typeof p === 'function') {\n          const [c, mod] = p()\n          if (mod === 'changed') {\n            c[$storeFlattened].forEach(prop => {\n              const $ = Symbol()\n              createShadow(prop, $)\n              changedProps.set(prop, $)\n            })\n            return c[$storeFlattened]\n          }\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeFlattened)) {\n          return p[$storeFlattened]\n        }\n        if (Object.getOwnPropertySymbols(p).includes($storeBase)) {\n          return p\n        }\n      })\n      .reduce((a,v) => a.concat(v), [])\n  }\n  return [componentProps, changedProps]\n}\n\n/**\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\n *\n * @param {object|array} target\n * @param {number} [maxBytes=20000000]\n * @returns {function} serializer\n */\nexport const defineSerializer = (target, maxBytes = 20000000) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n\n  let [componentProps, changedProps] = canonicalize(target)\n\n  // TODO: calculate max bytes based on target & recalc upon resize\n\n  const buffer = new ArrayBuffer(maxBytes)\n  const view = new DataView(buffer)\n\n  return (ents) => {\n\n    if (resized) {\n      [componentProps, changedProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n    \n    let world\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\n      world = ents\n      ents = ents[$entityArray]\n    } else {\n      world = eidToWorld.get(ents[0])\n    }\n\n    if (!ents.length) return\n\n    let where = 0\n\n    // iterate over component props\n    for (let pid = 0; pid < componentProps.length; pid++) {\n      const prop = componentProps[pid]\n      const $diff = changedProps.get(prop)\n      \n      // write pid\n      view.setUint8(where, pid)\n      where += 1\n\n      // save space for entity count\n      const countWhere = where\n      where += 4\n\n      let writeCount = 0\n      // write eid,val\n      for (let i = 0; i < ents.length; i++) {\n        const eid = ents[i]\n\n        // skip if entity doesn't have this component\n        if (!hasComponent(world, prop[$storeBase](), eid)) {\n          continue\n        }\n\n        const rewindWhere = where\n\n        // write eid\n        view.setUint32(where, eid)\n        where += 4\n\n        if (prop[$tagStore]) {\n          writeCount++\n          continue\n        }\n\n        // if property is an array\n        if (ArrayBuffer.isView(prop[eid])) {\n          const type = prop[eid].constructor.name.replace('Array', '')\n          const indexType = prop[eid][$indexType]\n          const indexBytes = prop[eid][$indexBytes]\n\n          // save space for count of dirty array elements\n          const countWhere2 = where\n          where += indexBytes\n\n          let arrayWriteCount = 0\n\n          // write index,value\n          for (let i = 0; i < prop[eid].length; i++) {\n            const value = prop[eid][i]\n\n            // if there are no changes then skip writing this value\n            if ($diff && prop[eid][i] === prop[$diff][eid][i]) {\n              // sync shadow state\n              prop[$diff][eid][i] = prop[eid][i]\n              continue\n            }\n            // sync shadow state\n            if ($diff) prop[$diff][eid][i] = prop[eid][i]\n\n            // write array index\n            view[`set${indexType}`](where, i)\n            where += indexBytes\n\n            // write value at that index\n            view[`set${type}`](where, value)\n            where += prop[eid].BYTES_PER_ELEMENT\n            arrayWriteCount++\n          }\n\n          if (arrayWriteCount > 0) {\n            // write total element count\n            view[`set${indexType}`](countWhere2, arrayWriteCount)\n            writeCount++\n          } else {\n            where = rewindWhere\n          }\n        } else {\n\n          // if there are no changes then skip writing this value\n          if ($diff && prop[$diff][eid] !== prop[eid]) {\n            where = rewindWhere\n            // sync shadow state\n            prop[$diff][eid] = prop[eid]\n            continue\n          }\n          // sync shadow state\n          if ($diff) prop[$diff][eid] = prop[eid]\n\n          const type = prop.constructor.name.replace('Array', '')\n          // set value next [type] bytes\n          view[`set${type}`](where, prop[eid])\n          where += prop.BYTES_PER_ELEMENT\n\n          writeCount++\n        }\n      }\n\n      if (writeCount > 0) {\n        // write how many eid/value pairs were written\n        view.setUint32(countWhere, writeCount)\n      } else {\n        // if nothing was written (diffed with no changes) \n        // then move cursor back 5 bytes (remove PID and countWhere space)\n        where -= 5\n      }\n    }\n    return buffer.slice(0, where)\n  }\n}\n\nconst newEntities = new Map()\n\n/**\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\n *\n * @param {object|array} target\n * @returns {function} deserializer\n */\nexport const defineDeserializer = (target) => {\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\n  let [componentProps] = canonicalize(target)\n\n\n  return (world, packet, mode=0) => {\n\n    newEntities.clear()\n    \n    if (resized) {\n      [componentProps] = canonicalize(target)\n      resized = false\n    }\n\n    if (isWorld) {\n      componentProps = []\n      target[$componentMap].forEach((c, component) => {\n        if (component[$storeFlattened])\n          componentProps.push(...component[$storeFlattened])\n        else componentProps.push(component)\n      })\n    }\n\n    const localEntities = world[$localEntities]\n    const localEntityLookup = world[$localEntityLookup]\n\n    const view = new DataView(packet)\n    let where = 0\n\n    while (where < packet.byteLength) {\n\n      // pid\n      const pid = view.getUint8(where)\n      where += 1\n\n      // entity count\n      const entityCount = view.getUint32(where)\n      where += 4\n\n      // component property\n      const prop = componentProps[pid]\n\n      // Get the entities and set their prop values\n      for (let i = 0; i < entityCount; i++) {\n        let eid = view.getUint32(where)\n        where += 4\n\n        if (mode === DESERIALIZE_MODE.MAP) {\n          if (localEntities.has(eid)) {\n            eid = localEntities.get(eid)\n          } else if (newEntities.has(eid)) {\n            eid = newEntities.get(eid)\n          } else {\n            const newEid = addEntity(world)\n            localEntities.set(eid, newEid)\n            localEntityLookup.set(newEid, eid)\n            newEntities.set(eid, newEid)\n            eid = newEid\n          }\n        }\n\n        if (mode === DESERIALIZE_MODE.APPEND ||  \n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\n        ) {\n          const newEid = newEntities.get(eid) || addEntity(world)\n          newEntities.set(eid, newEid)\n          eid = newEid\n        }\n\n        const component = prop[$storeBase]()\n        if (!hasComponent(world, component, eid)) {\n          addComponent(world, component, eid)\n        }\n\n        if (component[$tagStore]) {\n          continue\n        }\n        \n        if (ArrayBuffer.isView(prop[eid])) {\n          const array = prop[eid]\n          const count = view[`get${array[$indexType]}`](where)\n          where += array[$indexBytes]\n\n          // iterate over count\n          for (let i = 0; i < count; i++) {\n            const index = view[`get${array[$indexType]}`](where)\n            where += array[$indexBytes]\n\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\n            where += array.BYTES_PER_ELEMENT\n            if (prop[$isEidType]) {\n              let localEid = localEntities.get(value)\n              if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n              prop[eid][index] = localEid\n            } else prop[eid][index] = value\n          }\n        } else {\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\n          where += prop.BYTES_PER_ELEMENT\n\n          if (prop[$isEidType]) {\n            let localEid = localEntities.get(value)\n            if (!world[$entitySparseSet].has(localEid)) localEid = addEntity(world)\n            prop[eid] = localEid\n          } else prop[eid] = value\n        }\n      }\n    }\n  }\n}", "import { resizeComponents } from './Component.js'\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\nimport { $localEntities, $localEntityLookup, resizeWorlds } from './World.js'\nimport { setSerializationResized } from './Serialize.js'\n\nexport const $entityMasks = Symbol('entityMasks')\nexport const $entityComponents = Symbol('entityComponents')\nexport const $entitySparseSet = Symbol('entitySparseSet')\nexport const $entityArray = Symbol('entityArray')\nexport const $entityIndices = Symbol('entityIndices')\nexport const $removedEntities = Symbol('removedEntities')\n\nlet defaultSize = 100000\n\n// need a global EID cursor which all worlds and all components know about\n// so that world entities can posess entire rows spanning all component tables\nlet globalEntityCursor = 0\nlet globalSize = defaultSize\nlet resizeThreshold = () => globalSize - (globalSize / 5)\n\nexport const getGlobalSize = () => globalSize\n\n// removed eids should also be global to prevent memory leaks\nconst removed = []\n\nexport const resetGlobals = () => {\n  globalSize = defaultSize\n  globalEntityCursor = 0\n  removed.length = 0\n}\n\nexport const getDefaultSize = () => defaultSize\n\n/**\n * Sets the default maximum number of entities for worlds and component stores.\n *\n * @param {number} size\n */\nexport const setDefaultSize = size => { \n  defaultSize = size\n  resetGlobals()\n}\n\nexport const getEntityCursor = () => globalEntityCursor\nexport const getRemovedEntities = () => removed\n\nexport const eidToWorld = new Map()\n\n/**\n * Adds a new entity to the specified world.\n *\n * @param {World} world\n * @returns {number} eid\n */\nexport const addEntity = (world) => {\n\n  // if data stores are 80% full\n  if (globalEntityCursor >= resizeThreshold()) {\n    // grow by half the original size rounded up to a multiple of 4\n    const size = globalSize\n    const amount = Math.ceil((size/2) / 4) * 4\n    const newSize = size + amount\n    globalSize = newSize\n    resizeWorlds(newSize)\n    resizeComponents(newSize)\n    setSerializationResized(true)\n    console.info(`\uD83D\uDC7E bitECS - resizing all data stores from ${size} to ${newSize}`)\n  }\n\n  const eid = removed.length > 0 ? removed.shift() : globalEntityCursor++\n  \n  world[$entitySparseSet].add(eid)\n  eidToWorld.set(eid, world)\n\n  world[$notQueries].forEach(q => {\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  })\n\n  world[$entityComponents].set(eid, new Set())\n\n  return eid\n}\n\n/**\n * Removes an existing entity from the specified world.\n *\n * @param {World} world\n * @param {number} eid\n */\nexport const removeEntity = (world, eid) => {\n  // Check if entity is already removed\n  if (!world[$entitySparseSet].has(eid)) return\n\n  // Remove entity from all queries\n  // TODO: archetype graph\n  world[$queries].forEach(q => {\n    queryRemoveEntity(world, q, eid)\n  })\n\n  // Free the entity\n  removed.push(eid)\n\n  // remove all eid state from world\n  world[$entitySparseSet].remove(eid)\n  world[$entityComponents].delete(eid)\n\n  // remove from deserializer mapping\n  world[$localEntities].delete(world[$localEntityLookup].get(eid))\n  world[$localEntityLookup].delete(eid)\n\n  // Clear entity bitmasks\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\n}\n\n/**\n *  Returns an array of components that an entity possesses.\n *\n * @param {*} world\n * @param {*} eid\n */\nexport const getEntityComponents = (world, eid) => Array.from(world[$entityComponents].get(eid))", "import { SparseSet } from './Util.js'\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\nimport { $componentMap, registerComponent } from './Component.js'\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\n\n\n\nexport function Not(c) { return () => [c, 'not'] }\nexport function Or(c) { return () => [c, 'or'] }\nexport function Changed(c) { return () => [c, 'changed'] }\n\nexport function Any(...comps) { return function QueryAny() { return comps } }\nexport function All(...comps) { return function QueryAll() { return comps } }\nexport function None(...comps) { return function QueryNone() { return comps } }\n\nexport const $queries = Symbol('queries')\nexport const $notQueries = Symbol('notQueries')\n\nexport const $queryAny = Symbol('queryAny')\nexport const $queryAll = Symbol('queryAll')\nexport const $queryNone = Symbol('queryNone')\n\nexport const $queryMap = Symbol('queryMap')\nexport const $dirtyQueries = Symbol('$dirtyQueries')\nexport const $queryComponents = Symbol('queryComponents')\nexport const $enterQuery = Symbol('enterQuery')\nexport const $exitQuery = Symbol('exitQuery')\n\n/**\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const enterQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.entered.splice(0)\n}\n\n/**\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\n *\n * @param {function} query\n * @returns {function} enteredQuery\n */\nexport const exitQuery = query => world => {\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\n  const q = world[$queryMap].get(query)\n  return q.exited.splice(0)\n}\n\nexport const registerQuery = (world, query) => {\n\n  const components = []\n  const notComponents = []\n  const changedComponents = []\n\n  query[$queryComponents].forEach(c => {\n    if (typeof c === 'function') {\n      const [comp, mod] = c()\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\n      if (mod === 'not') {\n        notComponents.push(comp)\n      }\n      if (mod === 'changed') {\n        changedComponents.push(comp)\n        components.push(comp)\n      }\n      // if (mod === 'all') {\n      //   allComponents.push(comp)\n      // }\n      // if (mod === 'any') {\n      //   anyComponents.push(comp)\n      // }\n      // if (mod === 'none') {\n      //   noneComponents.push(comp)\n      // }\n    } else {\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\n      components.push(c)\n    }\n  })\n\n\n  const mapComponents = c => world[$componentMap].get(c)\n\n  const allComponents = components.concat(notComponents).map(mapComponents)\n\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\n  const sparseSet = SparseSet()\n\n  const archetypes = []\n  // const changed = SparseSet()\n  const changed = []\n  const toRemove = SparseSet()\n  const entered = []\n  const exited = []\n\n  const generations = allComponents\n    .map(c => c.generationId)\n    .reduce((a,v) => {\n      if (a.includes(v)) return a\n      a.push(v)\n      return a\n    }, [])\n\n  const reduceBitflags = (a,c) => {\n    if (!a[c.generationId]) a[c.generationId] = 0\n    a[c.generationId] |= c.bitflag\n    return a\n  }\n  const masks = components\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  const notMasks = notComponents\n    .map(mapComponents)\n    .reduce(reduceBitflags, {})\n\n  // const orMasks = orComponents\n  //   .map(mapComponents)\n  //   .reduce(reduceBitmasks, {})\n\n  const hasMasks = allComponents\n    .reduce(reduceBitflags, {})\n\n  const flatProps = components\n    .filter(c => !c[$tagStore])\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\n    .reduce((a,v) => a.concat(v), [])\n\n  const shadows = flatProps.map(prop => {\n      const $ = Symbol()\n      createShadow(prop, $)\n      return prop[$]\n  }, [])\n\n  const q = Object.assign(sparseSet, {\n    archetypes,\n    changed,\n    components,\n    notComponents,\n    changedComponents,\n    allComponents,\n    masks,\n    notMasks,\n    // orMasks,\n    hasMasks,\n    generations,\n    flatProps,\n    toRemove,\n    entered,\n    exited,\n    shadows,\n  })\n  \n  world[$queryMap].set(query, q)\n  world[$queries].add(q)\n  \n  allComponents.forEach(c => {\n    c.queries.add(q)\n  })\n\n  if (notComponents.length) world[$notQueries].add(q)\n\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\n    if (!world[$entitySparseSet].has(eid)) continue\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n  }\n}\n\nconst diff = (q, clearDiff) => {\n  if (clearDiff) q.changed = []\n  const { flatProps, shadows } = q\n  for (let i = 0; i < q.dense.length; i++) {\n    const eid = q.dense[i]\n    let dirty = false\n    for (let pid = 0; pid < flatProps.length; pid++) {\n      const prop = flatProps[pid]\n      const shadow = shadows[pid]\n      // console.log('hi', shadow)\n      if (ArrayBuffer.isView(prop[eid])) {\n        for (let i = 0; i < prop[eid].length; i++) {\n          if (prop[eid][i] !== shadow[eid][i]) {\n            dirty = true\n            shadow[eid][i] = prop[eid][i]\n            break\n          }\n        }\n      } else {\n        if (prop[eid] !== shadow[eid]) {\n          dirty = true\n          shadow[eid] = prop[eid]\n        }\n      }\n    }\n    if (dirty) q.changed.push(eid)\n  }\n  return q.changed\n}\n\n// const queryEntityChanged = (q, eid) => {\n//   if (q.changed.has(eid)) return\n//   q.changed.add(eid)\n// }\n\n// export const entityChanged = (world, component, eid) => {\n//   const { changedQueries } = world[$componentMap].get(component)\n//   changedQueries.forEach(q => {\n//     const match = queryCheckEntity(world, q, eid)\n//     if (match) queryEntityChanged(q, eid)\n//   })\n// }\n\nconst flatten = (a,v) => a.concat(v)\n\nconst aggregateComponentsFor = mod => x => x.filter(f => f.name === mod().constructor.name).reduce(flatten)\n\nconst getAnyComponents = aggregateComponentsFor(Any)\nconst getAllComponents = aggregateComponentsFor(All)\nconst getNoneComponents = aggregateComponentsFor(None)\n\n/**\n * Defines a query function which returns a matching set of entities when called on a world.\n *\n * @param {array} components\n * @returns {function} query\n */\n\nexport const defineQuery = (...args) => {\n  let components\n  let any, all, none\n  if (Array.isArray(args[0])) {\n    components = args[0]\n  } else {\n    // any = getAnyComponents(args)\n    // all = getAllComponents(args)\n    // none = getNoneComponents(args)\n  }\n  \n\n  if (components === undefined || components[$componentMap] !== undefined) {\n    return world => world ? world[$entityArray] : components[$entityArray]\n  }\n\n  const query = function (world, clearDiff=true) {\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\n\n    const q = world[$queryMap].get(query)\n\n    commitRemovals(world)\n\n    if (q.changedComponents.length) return diff(q, clearDiff)\n    // if (q.changedComponents.length) return q.changed.dense\n\n    return q.dense\n  }\n\n  query[$queryComponents] = components\n  query[$queryAny] = any\n  query[$queryAll] = all\n  query[$queryNone] = none\n\n  return query\n}\n\nconst bin = value => {\n  if (!Number.isSafeInteger(value)) {\n    throw new TypeError('value must be a safe integer');\n  }\n\n  const negative = value < 0;\n  const twosComplement = negative ? Number.MAX_SAFE_INTEGER + value + 1 : value;\n  const signExtend = negative ? '1' : '0';\n\n  return twosComplement.toString(2).padStart(4, '0').padStart(0, signExtend);\n}\n\n// TODO: archetype graph\nexport const queryCheckEntity = (world, q, eid) => {\n  const { masks, notMasks, generations } = q\n  let or = 0\n  for (let i = 0; i < generations.length; i++) {\n    const generationId = generations[i]\n    const qMask = masks[generationId]\n    const qNotMask = notMasks[generationId]\n    // const qOrMask = orMasks[generationId]\n    const eMask = world[$entityMasks][generationId][eid]\n    \n    // any\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\n    //   continue\n    // }\n    // not all \n    // if (qNotMask && (eMask & qNotMask) === qNotMask) {\n    // }\n    // not any\n    if (qNotMask && (eMask & qNotMask) !== 0) {\n      return false\n    }\n    // all\n    if (qMask && (eMask & qMask) !== qMask) {\n      return false\n    }\n  }\n  return true\n}\n\nexport const queryCheckComponent = (q, c) => {\n  const { generationId, bitflag } = c\n  const { hasMasks } = q\n  const mask = hasMasks[generationId]\n  return (mask & bitflag) === bitflag\n}\n\nexport const queryAddEntity = (q, eid) => {\n  if (q.has(eid)) return\n  q.add(eid)\n  q.entered.push(eid)\n}\n\nconst queryCommitRemovals = (q) => {\n  for (let i = q.toRemove.dense.length-1; i >= 0; i--) {\n    const eid = q.toRemove.dense[i]\n    q.toRemove.remove(eid)\n    q.remove(eid)\n  }\n}\n\nexport const commitRemovals = (world) => {\n  if (!world[$dirtyQueries].size) return\n  world[$dirtyQueries].forEach(queryCommitRemovals)\n  world[$dirtyQueries].clear()\n}\n\nexport const queryRemoveEntity = (world, q, eid) => {\n  if (!q.has(eid) || q.toRemove.has(eid)) return\n  q.toRemove.add(eid)\n  world[$dirtyQueries].add(q)\n  q.exited.push(eid)\n}\n\n\n/**\n * Resets a Changed-based query, clearing the underlying list of changed entities.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const resetChangedQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  q.changed = []\n}\n\n/**\n * Removes a query from a world.\n *\n * @param {World} world\n * @param {function} query\n */\nexport const removeQuery = (world, query) => {\n  const q = world[$queryMap].get(query)\n  world[$queries].delete(q)\n  world[$queryMap].delete(query)\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, commitRemovals } from './Query.js'\nimport { $bitflag, $size } from './World.js'\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents, getGlobalSize, $entitySparseSet } from './Entity.js'\n\nexport const $componentMap = Symbol('componentMap')\n\nexport const components = []\n\nexport const resizeComponents = (size) => {\n  components.forEach(component => resizeStore(component, size))\n}\n\n\n/**\n * Defines a new component store.\n *\n * @param {object} schema\n * @returns {object}\n */\nexport const defineComponent = (schema) => {\n  const component = createStore(schema, getGlobalSize())\n  if (schema && Object.keys(schema).length) components.push(component)\n  return component\n}\n\nexport const incrementBitflag = (world) => {\n  world[$bitflag] *= 2\n  if (world[$bitflag] >= 2**31) {\n    world[$bitflag] = 1\n    world[$entityMasks].push(new Uint32Array(world[$size]))\n  }\n}\n\n\n/**\n * Registers a component with a world.\n *\n * @param {World} world\n * @param {Component} component\n */\nexport const registerComponent = (world, component) => {\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\n\n  const queries = new Set()\n  const notQueries = new Set()\n  const changedQueries = new Set()\n\n  world[$queries].forEach(q => {\n    if (q.allComponents.includes(component)) {\n      queries.add(q)\n    }\n  })\n\n  world[$componentMap].set(component, { \n    generationId: world[$entityMasks].length - 1,\n    bitflag: world[$bitflag],\n    store: component,\n    queries,\n    notQueries,\n    changedQueries,\n  })\n\n  if (component[$storeSize] < getGlobalSize()) {\n    resizeStore(component, getGlobalSize())\n  }\n\n  incrementBitflag(world)\n}\n\n/**\n * Registers multiple components with a world.\n *\n * @param {World} world\n * @param {Component} components\n */\nexport const registerComponents = (world, components) => {\n  components.forEach(c => registerComponent(world, c))\n}\n\n/**\n * Checks if an entity has a component.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @returns {boolean}\n */\nexport const hasComponent = (world, component, eid) => {\n  const registeredComponent = world[$componentMap].get(component)\n  if (!registeredComponent) return false\n  const { generationId, bitflag } = registeredComponent\n  const mask = world[$entityMasks][generationId][eid]\n  return (mask & bitflag) === bitflag\n}\n\n/**\n * Adds a component to an entity\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=false]\n */\nexport const addComponent = (world, component, eid, reset=true) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\n  if (hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries, notQueries } = c\n    \n  // Add bitflag to entity bitmask\n  world[$entityMasks][generationId][eid] |= bitflag\n\n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).add(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n\n/**\n * Removes a component from an entity and resets component state unless otherwise specified.\n *\n * @param {World} world\n * @param {Component} component\n * @param {number} eid\n * @param {boolean} [reset=true]\n */\nexport const removeComponent = (world, component, eid, reset=false) => {\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\n  if (!hasComponent(world, component, eid)) return\n\n  const c = world[$componentMap].get(component)\n  const { generationId, bitflag, queries } = c\n\n  // Remove flag from entity bitmask\n  world[$entityMasks][generationId][eid] &= ~bitflag\n  \n  // todo: archetype graph\n  queries.forEach(q => {\n    // remove this entity from toRemove if it exists in this query\n    if (q.toRemove.has(eid)) q.toRemove.remove(eid)\n    const match = queryCheckEntity(world, q, eid)\n    if (match) queryAddEntity(q, eid)\n    if (!match) queryRemoveEntity(world, q, eid)\n  })\n\n  world[$entityComponents].get(eid).delete(component)\n\n  // Zero out each property value\n  if (reset) resetStoreFor(component, eid)\n}\n", "import { $componentMap } from './Component.js'\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\nimport { resize } from './Storage.js'\nimport { SparseSet } from './Util.js'\n\nexport const $size = Symbol('size')\nexport const $resizeThreshold = Symbol('resizeThreshold')\nexport const $bitflag = Symbol('bitflag')\nexport const $archetypes = Symbol('archetypes')\nexport const $localEntities = Symbol('localEntities')\nexport const $localEntityLookup = Symbol('localEntityLookp')\n\nexport const worlds = []\n\nexport const resizeWorlds = (size) => {\n  worlds.forEach(world => {\n    world[$size] = size\n\n    for (let i = 0; i < world[$entityMasks].length; i++) {\n      const masks = world[$entityMasks][i];\n      world[$entityMasks][i] = resize(masks, size)\n    }\n    \n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\n  })\n}\n\n/**\n * Creates a new world.\n *\n * @returns {object}\n */\nexport const createWorld = (obj={}) => {\n  const world = obj\n  resetWorld(world)\n  worlds.push(world)\n  return world\n}\n\n/**\n * Resets a world.\n *\n * @param {World} world\n * @returns {object}\n */\nexport const resetWorld = (world) => {\n  const size = getGlobalSize()\n  world[$size] = size\n\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\n\n  world[$entityMasks] = [new Uint32Array(size)]\n  world[$entityComponents] = new Map()\n  world[$archetypes] = []\n\n  world[$entitySparseSet] = SparseSet()\n  world[$entityArray] = world[$entitySparseSet].dense\n\n  world[$bitflag] = 1\n\n  world[$componentMap] = new Map()\n\n  world[$queryMap] = new Map()\n  world[$queries] = new Set()\n  world[$notQueries] = new Set()\n  world[$dirtyQueries] = new Set()\n\n  world[$localEntities] = new Map()\n  world[$localEntityLookup] = new Map()\n\n  return world\n}\n\n/**\n * Deletes a world.\n *\n * @param {World} world\n */\nexport const deleteWorld = (world) => {\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\n  Object.keys(world).forEach(key => { delete world[key] })\n  worlds.splice(worlds.indexOf(world), 1)\n}\n", "/**\n * Defines a new system function.\n *\n * @param {function} update\n * @returns {function}\n */\n export const defineSystem = (update) => (world, ...args) => {\n  update(world, ...args)\n  return world\n}", "import { createWorld, resetWorld, deleteWorld } from './World.js'\nimport { addEntity, removeEntity, setDefaultSize, getEntityComponents} from './Entity.js'\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\nimport { defineSystem } from './System.js'\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\nimport { parentArray } from './Storage.js'\nimport { TYPES_ENUM } from './Constants.js'\n// import { defineProxy } from './Proxy.js'\n\nexport const pipe = (...fns) => (input) => {\n  let tmp = input\n  for (let i = 0; i < fns.length; i++) {\n    const fn = fns[i]\n    tmp = fn(tmp)\n  }\n  return tmp\n}\n\nexport const Types = TYPES_ENUM\n\nexport {\n\n  setDefaultSize,\n  createWorld,\n  resetWorld,\n  deleteWorld,\n  addEntity,\n  removeEntity,\n\n  registerComponent,\n  registerComponents,\n  defineComponent,\n  addComponent,\n  removeComponent,\n  hasComponent,\n  getEntityComponents,\n  // entityChanged,\n\n  // defineProxy,\n\n  defineQuery,\n  Changed,\n  Not,\n  // Or,\n  enterQuery,\n  exitQuery,\n  commitRemovals,\n  resetChangedQuery,\n  removeQuery,\n\n  defineSystem,\n  \n  defineSerializer,\n  defineDeserializer,\n  DESERIALIZE_MODE,\n\n  parentArray,\n\n}\n", "import { Types } from \"bitecs\";\r\n\r\nexport const Vector2 = {value: [Types.f32, 2]}\r\nexport const Rect = {x: Types.f32, y: Types.f32, width: Types.f32, height: Types.f32}", "import { defineComponent, Types } from \"bitecs\";\r\nimport { Rect, Vector2 } from \"./baseTypes\";\r\n\r\nexport const Position = defineComponent(Vector2)\r\nexport const Direction = defineComponent(Vector2)\r\nexport const Velocity = defineComponent(Vector2)\r\nexport const Speed = defineComponent({value: Types.f32})\r\nexport const EntityData = defineComponent({dataID: Types.ui16, category: Types.ui8, variant: Types.ui8})\r\nexport const Hitbox = defineComponent(Rect)\r\nexport const Movement = defineComponent({maxSpeed: Types.f32})\r\nexport const Action = defineComponent({\r\n  type: Types.ui8,\r\n  item: Types.ui16,\r\n  start: Types.ui32,\r\n  duration: Types.ui32,\r\n  trigger: Types.f32,\r\n  target: [Types.f32, 2]\r\n})\r\nexport const PerformingAction = defineComponent()\r\nexport const Chunk = defineComponent({terrain: [Types.ui16, 1024]})\r\nexport const Loading = defineComponent()\r\nexport const TargetPosition = defineComponent(Vector2)\r\nexport const TilePosition = defineComponent({x: Types.i32, y: Types.i32})\r\nexport const StaticEntity = defineComponent()\r\nexport const Door = defineComponent({locked: Types.ui8})\r\nexport const Collider = defineComponent()\r\nexport const PlayerCharacter = defineComponent()\r\nexport const Authority = defineComponent()\r\nexport const Inventory = defineComponent({\r\n  items: [Types.ui16, 30],\r\n  amounts: [Types.ui16, 30]\r\n})\r\nexport const Equipped = defineComponent({slot: Types.i8})\r\nexport const Holding = defineComponent({item: Types.ui16})\r\nexport const Destroy = defineComponent()\r\nexport const Hitpoints = defineComponent({current: Types.f32, maximum: Types.f32})", "import { Chunk, Collider, Door, EntityData, Position, StaticEntity } from \"./components\";\r\n\r\nexport default [Position, EntityData, StaticEntity, Door, Collider, Chunk]", "import { Direction, EntityData, Hitbox, Holding, Movement, Position, Speed, TargetPosition, Velocity } from \"./components\";\r\n\r\nexport default [Position, Direction, Velocity, Movement, EntityData, Hitbox, TargetPosition, Speed, Holding]", "import { Chunk } from \"./components\";\r\nimport staticEntityComponents from \"./staticEntityComponents\";\r\nimport creatureComponents from \"./creatureComponents\";\r\n\r\n// using a Set ensures unique elements\r\nexport default [...new Set([...staticEntityComponents, ...creatureComponents, Chunk])]", "import { addComponent, addEntity, Changed, createWorld, defineComponent, defineDeserializer, defineQuery, defineSerializer, DESERIALIZE_MODE, pipe, Types } from \"bitecs\"\r\nimport chunkEntityComponents from \"./chunkEntityComponents\"\r\nimport { Chunk, Collider, Door, Hitpoints, Position, StaticEntity } from \"./components\"\r\n\r\nconsole.log(\"Testing bitECS serializer\")\r\n\r\nconst world = createWorld()\r\n\r\nconst ArrayComponent = defineComponent({arr: [Types.ui16, 1024]})\r\nconst serializeArray = defineSerializer([ArrayComponent])\r\nconst deserializeArray = defineDeserializer([ArrayComponent])\r\nconst Vector2Component = defineComponent({value: [Types.f32, 2]})\r\nconst serializeVector2 = defineSerializer([Vector2Component])\r\nconst deserializeVector2 = defineDeserializer([Vector2Component])\r\nconst EntityData = defineComponent({dataID: Types.ui16, category: Types.ui8, variant: Types.ui8})\r\nconst TagComponent = defineComponent()\r\nconst serializeAll = defineSerializer([ArrayComponent, Vector2Component, EntityData, TagComponent])\r\nconst deserializeAll = defineDeserializer([ArrayComponent, Vector2Component, EntityData, TagComponent])\r\n\r\nconst eid = addEntity(world)\r\naddComponent(world, ArrayComponent, eid)\r\n\r\nconst testArraySerializer = world => {\r\n  try {\r\n    console.log(\"Serializing entity with array component\")\r\n    const packet = serializeArray([eid])\r\n    console.log(`Packet bytes: ${packet.byteLength}`)\r\n    console.log(\"Deserializing packet\")\r\n    deserializeArray(world, packet, DESERIALIZE_MODE.REPLACE)\r\n    console.log(\"Deserialized packet OK!\")\r\n    console.log(\"Creating multiple entities with all components\")\r\n    const eids = [eid]\r\n    for (let i = 0; i < 10; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, ArrayComponent, eid)\r\n      addComponent(world, EntityData, eid)\r\n      addComponent(world, TagComponent, eid)\r\n      ArrayComponent.arr[eid][5] = 3\r\n      EntityData.category[eid] = 2\r\n      EntityData.dataID[eid] = 3\r\n      EntityData.variant[eid] = 1\r\n      eids.push(eid)\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, Vector2Component, eid)\r\n      addComponent(world, EntityData, eid)\r\n      Vector2Component.value[eid][1] = 0.8\r\n      EntityData.category[eid] = 6\r\n      EntityData.dataID[eid] = 7\r\n      EntityData.variant[eid] = 3\r\n      eids.push(eid)\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, Vector2Component, eid)\r\n      addComponent(world, ArrayComponent, eid)\r\n      addComponent(world, EntityData, eid)\r\n      Vector2Component.value[eid][0] = 0.3\r\n      ArrayComponent.arr[eid][4] = 6\r\n      ArrayComponent.arr[eid][5] = 8\r\n      EntityData.category[eid] = 19\r\n      EntityData.dataID[eid] = 3\r\n      EntityData.variant[eid] = 4\r\n      eids.push(eid)\r\n    }\r\n    console.log(\"Serializing multiple entities with all components\")\r\n    const packet2 = serializeAll(eids)\r\n    console.log(`Packet bytes: ${packet2.byteLength}`)\r\n    deserializeAll(world, packet2, DESERIALIZE_MODE.REPLACE)\r\n    console.log(\"Deserialized packet OK!\")\r\n    console.log(\"Creating multiple entities with all components again\")\r\n    eids.length = 0\r\n    eids.push[eid]\r\n    for (let i = 0; i < 10; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, ArrayComponent, eid)\r\n      addComponent(world, EntityData, eid)\r\n      ArrayComponent.arr[eid][5] = 3\r\n      ArrayComponent.arr[eid][2] = 1\r\n      EntityData.category[eid] = 2\r\n      EntityData.dataID[eid] = 3\r\n      EntityData.variant[eid] = 1\r\n      eids.push(eid)\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, Vector2Component, eid)\r\n      addComponent(world, EntityData, eid)\r\n      Vector2Component.value[eid][1] = 0.8\r\n      Vector2Component.value[eid][0] = -0.5\r\n      EntityData.category[eid] = 6\r\n      EntityData.dataID[eid] = 7\r\n      EntityData.variant[eid] = 3\r\n      eids.push(eid)\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, Vector2Component, eid)\r\n      addComponent(world, ArrayComponent, eid)\r\n      addComponent(world, EntityData, eid)\r\n      Vector2Component.value[eid][0] = 0.3\r\n      ArrayComponent.arr[eid][4] = 6\r\n      ArrayComponent.arr[eid][5] = 8\r\n      EntityData.category[eid] = 19\r\n      EntityData.dataID[eid] = 3\r\n      EntityData.variant[eid] = 4\r\n      eids.push(eid)\r\n    }\r\n    console.log(\"Serializing multiple entities with all components again\")\r\n    const packet3 = serializeAll(eids)\r\n    console.log(`Packet bytes: ${packet3.byteLength}`)\r\n    deserializeAll(world, packet3, DESERIALIZE_MODE.REPLACE)\r\n    console.log(\"Deserialized packet OK!\")\r\n\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n  return world\r\n}\r\n\r\nconst eid2 = addEntity(world)\r\naddComponent(world, Vector2Component, eid2)\r\n\r\nconst testVector2Serializer = world => {\r\n  try {\r\n    console.log(\"Serializing entity with Vector2 component\")\r\n    const packet = serializeVector2([eid2])\r\n    console.log(`Packet bytes: ${packet.byteLength}`)\r\n    console.log(\"Deserializing packet\")\r\n    deserializeVector2(world, packet, DESERIALIZE_MODE.REPLACE)\r\n    console.log(\"Deserialized packet OK!\")\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n  return world\r\n}\r\n\r\nconst vector2Query = defineQuery([Vector2Component])\r\nconst serializeVector2FromQuery = pipe(vector2Query, serializeVector2)\r\n\r\nconst testQuerySerializer = world => {\r\n  try {\r\n    console.log(\"Serializing entity with Vector2 component from piped query\")\r\n    console.log(`${vector2Query(world).length} entities in query`)\r\n    const packet = serializeVector2FromQuery(world)\r\n    if (!packet) return console.error(\"NULL Packet\")\r\n    else console.log(`Packet bytes: ${packet.byteLength}`)\r\n    console.log(\"Deserializing packet\")\r\n    deserializeVector2(world, packet, DESERIALIZE_MODE.REPLACE)\r\n    console.log(\"Deserialized packet OK!\")\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n  return world\r\n}\r\n\r\nconst serializeChangedVector2 = defineSerializer([Changed(Vector2Component)])\r\nconst deserializeChangedVector2 = defineDeserializer([Changed(Vector2Component)])\r\nconst serializeChangedArray = defineSerializer([Changed(ArrayComponent)])\r\n\r\nconst eid3 = addEntity(world)\r\naddComponent(world, Vector2Component, eid3)\r\naddComponent(world, ArrayComponent, eid3)\r\n\r\nconst eid4 = addEntity(world)\r\naddComponent(world, ArrayComponent, eid4)\r\nfor (let i = 0; i < 1024; i++) ArrayComponent.arr[eid4][i] = i+1\r\n\r\nconst testChangedSerializer = world => {\r\n  try {\r\n    Vector2Component.value[eid3][0] = 3.4\r\n    console.log(\"Serializing entity with changed Vector2 serializer\")\r\n    const packet = serializeChangedVector2([eid3])\r\n    console.log(`Packet bytes: ${packet.byteLength}`)\r\n    console.log(\"Deserializing packet\")\r\n    deserializeChangedVector2(world, packet, DESERIALIZE_MODE.REPLACE)\r\n    console.log(\"Deserialized packet OK!\")\r\n    console.log(\"Serializing entity after no value change\")\r\n    const packet2 = serializeChangedVector2([eid3])\r\n    console.log(`Packet bytes: ${packet2.byteLength} (expected 0)`)\r\n    console.log(\"Changing component value\")\r\n    Vector2Component.value[eid3][1] = 5\r\n    console.log(\"Serializing entity after value change\")\r\n    const packet3 = serializeChangedVector2([eid3])\r\n    console.log(`Packet bytes: ${packet3.byteLength}`)\r\n    console.log(\"Serializing entity with changed array serializer\")\r\n    const packet4 = serializeChangedArray([eid3])\r\n    console.log(`Packet bytes: ${packet4.byteLength}`)\r\n    console.log(\"Serializing entity after no value change\")\r\n    const packet5 = serializeChangedArray([eid3])\r\n    console.log(`Packet bytes: ${packet5.byteLength} (expected 0)`)\r\n    console.log(\"Changing component value\")\r\n    ArrayComponent.arr[eid3][6] = 5\r\n    console.log(\"Serializing entity after value change\")\r\n    const packet6 = serializeChangedArray([eid3])\r\n    console.log(`Packet bytes: ${packet6.byteLength}`)\r\n    console.log(\"Serializing entity after no value change\")\r\n    const packet7 = serializeChangedArray([eid3])\r\n    console.log(`Packet bytes: ${packet7.byteLength} (expected 0)`)\r\n    console.log(\"Serialize filled array\")\r\n    const packet9 = serializeChangedArray([eid4])\r\n    console.log(`Packet bytes: ${packet9.byteLength}`)\r\n    console.log(\"Serialize filled array after no change\")\r\n    const packet10 = serializeChangedArray([eid4])\r\n    console.log(`Packet bytes: ${packet10.byteLength} (expected 0)`)\r\n    console.log(\"Run the serializer a few times for good luck\")\r\n    serializeChangedArray([eid4])\r\n    serializeChangedArray([eid4])\r\n    serializeChangedArray([eid4])\r\n    console.log(\"Change one value in filled array\")\r\n    ArrayComponent.arr[eid4][66] = 2\r\n    console.log(\"Serialize filled array after change along with non changed entity\")\r\n    const packet11 = serializeChangedArray([eid4, eid3])\r\n    console.log(`Packet bytes: ${packet11.byteLength}`)\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n  return world\r\n}\r\n\r\nconst testChangedSerializerNoChange = world => {\r\n  try {\r\n    console.log(\"Serializing unchanged entity with changed Vector2 serializer\")\r\n    const packet = serializeChangedVector2([eid3])\r\n    console.log(`Packet bytes: ${packet.byteLength} (expected 0)`)\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n  return world\r\n}\r\n\r\nconst actualComponentSerializer = defineSerializer(chunkEntityComponents)\r\nconst actualComponentDeserializer = defineDeserializer(chunkEntityComponents)\r\n\r\nconst testActualComponents = world => {\r\n  try {\r\n    console.log(\"Creating chunk entities using actual components from game\")\r\n    const chunkEID = addEntity(world)\r\n    addComponent(world, Chunk, chunkEID)\r\n    addComponent(world, Position, chunkEID)\r\n    const eids = [chunkEID]\r\n    for (let i = 0; i < 50; i++) {\r\n      const eid = addEntity(world)\r\n      addComponent(world, Position, eid)\r\n      addComponent(world, EntityData, eid)\r\n      addComponent(world, StaticEntity, eid)\r\n      addComponent(world, Hitpoints, eid)\r\n      if (Math.random() < 0.5) addComponent(world, Collider, eid)\r\n      if (Math.random() < 0.5) addComponent(world, Door, eid)\r\n      eids.push(eid)\r\n    }\r\n    console.log(\"Serializing chunk entities\")\r\n    const packet = actualComponentSerializer(eids)\r\n    console.log(`Packet bytes: ${packet.byteLength}`)\r\n    actualComponentDeserializer(world, packet)\r\n    console.log(\"Deserialization OK!\")\r\n  }\r\n  catch(err) {\r\n    console.error(err)\r\n  }\r\n  return world\r\n}\r\n\r\nconst arrEntities = []\r\nfor (let i = 0; i < 10; i++) {\r\n  const eid = addEntity(world)\r\n  addComponent(world, ArrayComponent, eid)\r\n  for (let j = 0; j < 1024; j++) ArrayComponent.arr[eid][j] = j+1\r\n  arrEntities.push(eid)\r\n}\r\nconst changedArrayQuery = defineQuery([Changed(ArrayComponent)])\r\n\r\nconst testChanged = world => {\r\n  console.log(`${changedArrayQuery(world).length} changed array entities`)\r\n  console.log(`${changedArrayQuery(world).length} changed array entities in 2nd run`)\r\n  console.log('Changing a value')\r\n  ArrayComponent.arr[arrEntities[5]][10] = 5\r\n  console.log(`${changedArrayQuery(world).length} changed array entities in 3rd run`)\r\n  console.log(`${changedArrayQuery(world).length} changed array entities in 4th run`)\r\n  return world\r\n}\r\n\r\nconst pipeline = pipe(\r\n  testArraySerializer,\r\n  testVector2Serializer,\r\n  testQuerySerializer,\r\n  testChangedSerializer,\r\n  testActualComponents,\r\n  testChangedSerializerNoChange,\r\n  testChangedSerializerNoChange,\r\n  testChangedSerializerNoChange,\r\n  testChanged\r\n)\r\n\r\npipeline(world)"],
  "mappings": "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",
  "names": []
}
